substitutions:
  device_name: air-quality
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  api_password: !secret api_password
  ota_password: !secret ota_password
  encryption_key: !secret encryption_key
  
globals:
   - id: max_brightness
     type: float
     restore_value: no
     initial_value: '0.5'
   - id: min_brightness
     type: float
     restore_value: no
     initial_value: '0.1'

web_server:
  port: 80

esphome:
  name: ${device_name}
  comment: IKEA LaskaKit ESP-VINDRIKTNING ESP-32 I2C
  on_boot:
      - light.turn_on:
          id: led
          brightness: 0%

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}
api:  
  encryption: 
    key: ${encryption_key}
ota:
  platform: esphome
  password: ${ota_password}

logger:

uart:
  rx_pin: 16
  tx_pin: 17
  baud_rate: 9600
  id: uart_2

sensor:
  # - platform: pm1006
  #   pm_2_5:
  #     name: "Particulate Matter 2.5Âµm Concentration"
  #     id: pm
  #     accuracy_decimals: 1
  #     on_value:
  #       then:
  #       - if:
  #           condition:
  #             lambda: 'return x < 30;'
  #           then:
  #             - light.addressable_set:
  #                 id: led
  #                 range_from: 0
  #                 range_to: 0
  #                 red: 0.0
  #                 green: 1.0
  #                 blue: 0.0
  #                 color_brightness:  !lambda |-
  #                   return id(sun_elevation).state > 0 ? id(max_brightness) : id(min_brightness);
  #           else:
  #           - if:
  #               condition:
  #                 lambda: 'return x > 90;'
  #               then:
  #               - light.addressable_set:
  #                   id: led
  #                   range_from: 0
  #                   range_to: 0
  #                   red: 1.0
  #                   green: 0.0
  #                   blue: 0.0
  #                   color_brightness:  !lambda |-
  #                     return id(sun_elevation).state > 0 ? id(max_brightness) : id(min_brightness);
  #               else:
  #               - light.addressable_set:
  #                   id: led
  #                   range_from: 0
  #                   range_to: 0
  #                   red: 1.0
  #                   green: 0.72
  #                   blue: 0.0
  #                   color_brightness:  !lambda |-
  #                     return id(sun_elevation).state > 0 ? id(max_brightness) : id(min_brightness);
  #   uart_id: uart_2
  #   update_interval: 20s
  - platform: scd4x
    measurement_mode: low_power_periodic    
    co2:
      name: "CO2"
      id: co2
      on_value:
        then:
        - if:
            condition:
              lambda: 'return x < 1000;'
            then:
              - light.addressable_set:
                  id: led
                  range_from: 1
                  range_to: 1
                  red: 0.0
                  green: 1.0
                  blue: 0.0
                  color_brightness:  !lambda |-
                    return id(sun_elevation).state > 0 ? id(max_brightness) : id(min_brightness);
            else:
            - if:
                condition:
                  lambda: 'return x > 1500;'
                then:
                - light.addressable_set:
                    id: led
                    range_from: 1
                    range_to: 1
                    red: 1.0
                    green: 0.0
                    blue: 0.0
                    color_brightness:  !lambda |-
                      return id(sun_elevation).state > 0 ? id(max_brightness) : id(min_brightness);
                else:
                - light.addressable_set:
                    id: led
                    range_from: 1
                    range_to: 1
                    red: 1.0
                    green: 0.72
                    blue: 0.0
                    color_brightness:  !lambda |-
                      return id(sun_elevation).state > 0 ? id(max_brightness) : id(min_brightness);
    temperature:
      name: "Temperature"    
      id: temperature
    temperature_offset: 8.0
    humidity:
      name: "Humidity"    
      id: humidity
      on_value:
        then:
        - if:
            condition:
              lambda: 'return x < 30;'
            then:
              - light.addressable_set:
                  id: led
                  range_from: 2
                  range_to: 2
                  red: 1.0
                  green: 0.0
                  blue: 0.0
                  color_brightness:  !lambda |-
                    return id(sun_elevation).state > 0 ? id(max_brightness) : id(min_brightness);
            else:
            - if:
                condition:
                  lambda: 'return x > 60;'
                then:
                - light.addressable_set:
                    id: led
                    range_from: 2
                    range_to: 2
                    red: 0.0
                    green: 0.0
                    blue: 1.0
                    color_brightness:  !lambda |-
                      return id(sun_elevation).state > 0 ? id(max_brightness) : id(min_brightness);
                else:
                - light.addressable_set:
                    id: led
                    range_from: 2
                    range_to: 2
                    red: 0.0
                    green: 1.0
                    blue: 0.0
                    color_brightness:  !lambda |-
                      return id(sun_elevation).state > 0 ? id(max_brightness) : id(min_brightness);
  - platform: homeassistant
    id: sun_elevation
    entity_id: sun.sun
    attribute: elevation
  - platform: wifi_signal
    name: "Air quality WiFi Signal Sensor"
    entity_category: diagnostic
    disabled_by_default: true
    update_interval: 60s

switch:
  - platform: gpio
    pin: 12
    id: fan
    restore_mode: ALWAYS_ON
    disabled_by_default: true
    entity_category: diagnostic

light:
  - platform: neopixelbus
    name: "LED"
    type: GRB
    variant: WS2812
    pin: GPIO25
    num_leds: 3
    id: led
    restore_mode: ALWAYS_ON
    method:
      type: esp32_rmt
      channel: 6
    effects:
      - addressable_rainbow:      
      - addressable_color_wipe:  
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_scan:
      - addressable_fireworks:
      - addressable_flicker:

i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

button:
  - platform: restart
    name: "Restart ${device_name}"
    disabled_by_default: true
    entity_category: diagnostic

